{"version":3,"sources":["components/ConfigDefaults.ts","components/ConfigScreen.tsx","components/Field.tsx","index.tsx"],"names":["colormap","defaultParameters","apiKey","plugins","toolbar","formatgroup","insertgroup","assetgroup","extragroup","quickbarsSelectionToolbar","menubar","customcolors","custompalette","resizing","customContentStyle","Config","props","onConfigure","a","errors","state","parameters","filter","color","idx","validateHexColor","push","length","sdk","notifier","error","app","getCurrentState","currentState","targetState","test","onInputChange","event","target","name","value","newParams","setState","onSwitchChange","isChecked","onColorChange","onColorLabelChange","this","getParameters","setReady","className","css","margin","id","labelText","required","onChange","textLinkProps","icon","text","onClick","window","open","style","marginTop","helpText","includes","onToggle","textarea","textInputProps","rows","htmlFor","minWidth","map","backgroundColor","e","Component","Field","installation","React","useState","init","setInit","field","getValue","setValue","debounceInterval","onExternalChange","externalValue","useEffect","startAutoResizer","onValueChanged","renderContent","data","assetType","title","url","width","height","renderImage","renderLink","getAssetData","asset","fields","file","locale","contentType","sys","details","image","handleSelectAsset","dialogs","selectSingleAsset","then","handleCreateAsset","navigator","openNewAsset","slideIn","waitForClose","entity","handleEditAsset","openAsset","defaults","image_caption","custom_colors","toolbar_groups","quickbars_selection_toolbar","quickbars_insert_toolbar","content_style","setup","editor","ui","registry","addButton","tooltip","onAction","insertContent","node","selection","getNode","parts","getAttribute","replace","ids","space","split","addContextToolbar","predicate","nodeName","toLowerCase","items","position","scope","setupEditor","color_map","onEditorChange","newValue","clearInterval","setTimeout","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_FIELD","forEach","componentLocationSetting","is","render"],"mappings":"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","file":"static/js/main.7b3438de.chunk.js","sourcesContent":["export interface AppInstallationParameters {\n  apiKey: string;\n  plugins: string;\n  toolbar: string;\n  assetgroup: string;\n  extragroup: string;\n  formatgroup: string;\n  insertgroup: string;\n  quickbarsSelectionToolbar: string;\n  menubar: boolean;\n  customcolors: boolean;\n  custompalette: boolean;\n  resizing: string;\n  colormap: string[];\n  customContentStyle: string;\n}\n\nexport const colormap: string[] = [\n  \"#BFEDD2\",\n  \"Light Green\",\n  \"#FBEEB8\",\n  \"Light Yellow\",\n  \"#F8CAC6\",\n  \"Light Red\",\n  \"#ECCAFA\",\n  \"Light Purple\",\n  \"#C2E0F4\",\n  \"Light Blue\",\n\n  \"#2DC26B\",\n  \"Green\",\n  \"#F1C40F\",\n  \"Yellow\",\n  \"#E03E2D\",\n  \"Red\",\n  \"#B96AD9\",\n  \"Purple\",\n  \"#3598DB\",\n  \"Blue\",\n\n  \"#169179\",\n  \"Dark Turquoise\",\n  \"#E67E23\",\n  \"Orange\",\n  \"#BA372A\",\n  \"Dark Red\",\n  \"#843FA1\",\n  \"Dark Purple\",\n  \"#236FA1\",\n  \"Dark Blue\",\n\n  \"#ECF0F1\",\n  \"Light Gray\",\n  \"#CED4D9\",\n  \"Medium Gray\",\n  \"#95A5A6\",\n  \"Gray\",\n  \"#7E8C8D\",\n  \"Dark Gray\",\n  \"#34495E\",\n  \"Navy Blue\",\n\n  \"#000000\",\n  \"Black\",\n  \"#ffffff\",\n  \"White\",\n];\n\nexport const defaultParameters: AppInstallationParameters = {\n  apiKey: \"\",\n  plugins:\n    \"preview advlist autolink lists link image charmap anchor searchreplace visualblocks visualchars code fullscreen insertdatetime media table paste wordcount autoresize hr nonbreaking paste quickbars emoticons\",\n  toolbar:\n    \"undo redo | styleselect | bold italic underline formatgroup | bullist numlist | table assetgroup link | insertgroup | extragroup\",\n  formatgroup:\n    \"strikethrough superscript subscript | alignleft aligncenter alignright | indent outdent | forecolor backcolor | removeformat\",\n  insertgroup:\n    \"media emoticons charmap emoji hr anchor insertdatetime nonbreaking\",\n  assetgroup: \"existingasset newasset\",\n  extragroup:\n    \"paste pastetext | visualchars visualblocks preview wordcount | searchreplace | code\",\n  quickbarsSelectionToolbar:\n    \"bold italic underline | formatselect | quicklink blockquote\",\n  menubar: false,\n  customcolors: false,\n  custompalette: false,\n  colormap: colormap,\n  resizing: \"fit=fill&w=1024&q=80\",\n  customContentStyle:\n    \"img { max-width: 100% !important; max-height: 400px; object-fit: cover; }\",\n};\n","import React, { Component, ChangeEvent } from \"react\";\nimport { AppExtensionSDK } from \"contentful-ui-extensions-sdk\";\nimport {\n  Heading,\n  Form,\n  Workbench,\n  Paragraph,\n  TextField,\n  Switch,\n  ValidationMessage,\n  FormLabel,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  HelpText,\n} from \"@contentful/forma-36-react-components\";\nimport { css } from \"emotion\";\n\nimport {\n  AppInstallationParameters,\n  colormap,\n  defaultParameters,\n} from \"./ConfigDefaults\";\n\ntype ParameterKeys = keyof AppInstallationParameters;\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: defaultParameters };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    if (parameters && !parameters?.colormap) {\n      parameters.colormap = colormap;\n    }\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Validate colors.\n    const errors = this.state.parameters.colormap.filter((color, idx) => {\n      if (idx % 2 === 0) {\n        return !this.validateHexColor(color) ? true : false;\n      } else {\n        return false;\n      }\n    });\n\n    // Validate that apiKey is present.\n    if (!this.state.parameters.apiKey) {\n      errors.push(\"apiKey\");\n    }\n\n    if (errors.length) {\n      this.props.sdk.notifier.error(\n        \"Please fix all validation errors before saving\"\n      );\n\n      return false;\n    }\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  validateHexColor = (color: string): boolean =>\n    /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);\n\n  onInputChange = (event: ChangeEvent): void => {\n    const target = event.target as HTMLInputElement;\n    const { name, value } = target;\n    const newParams: any = { ...this.state.parameters };\n    newParams[name as ParameterKeys] = value;\n\n    this.setState({\n      parameters: newParams,\n    });\n  };\n\n  onSwitchChange = (name: string, isChecked: boolean): void => {\n    const newParams: any = { ...this.state.parameters };\n    newParams[name as ParameterKeys] = isChecked;\n\n    this.setState({\n      parameters: newParams,\n    });\n  };\n\n  onColorChange = (event: ChangeEvent, idx: number): void => {\n    const target = event.target as HTMLInputElement;\n    const { value } = target;\n    const newParams: any = { ...this.state.parameters };\n    newParams.colormap[idx] = value;\n    this.setState({\n      parameters: newParams,\n    });\n  };\n\n  onColorLabelChange = (event: ChangeEvent, idx: number): void => {\n    const target = event.target as HTMLInputElement;\n    const { value } = target;\n    const newParams: any = { ...this.state.parameters };\n    newParams.colormap[idx] = value;\n    this.setState({\n      parameters: newParams,\n    });\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: \"80px\" })}>\n        <Form>\n          <Heading>TinyMCE Editor</Heading>\n          <Paragraph>\n            This App provides the TinyMCE editor as an alternative to use a\n            WYSIWYG editor in Contentful.\n          </Paragraph>\n          <TextField\n            name=\"apiKey\"\n            id=\"apiKey\"\n            labelText=\"TinyMCE API Key\"\n            required\n            value={this.state.parameters.apiKey}\n            onChange={this.onInputChange}\n            textLinkProps={{\n              icon: \"ExternalLink\",\n              text: \"Get a tinyMCE API key\",\n              onClick: () =>\n                window.open(\"https://www.tiny.cloud/my-account/dashboard\"),\n            }}\n          />\n          <Paragraph style={{ marginTop: \"2em\" }}>\n            The below defaults can be changed, check tiny documentation for all\n            available options:\n          </Paragraph>\n          <TextField\n            name=\"plugins\"\n            id=\"plugins\"\n            labelText=\"Plugins\"\n            required\n            value={this.state.parameters.plugins}\n            onChange={this.onInputChange}\n            textLinkProps={{\n              icon: \"ExternalLink\",\n              text: \"Plugins\",\n              onClick: () =>\n                window.open(\"https://www.tiny.cloud/docs/plugins/\"),\n            }}\n          />\n\n          <TextField\n            name=\"toolbar\"\n            id=\"toolbar\"\n            labelText=\"Toolbar\"\n            required\n            value={this.state.parameters.toolbar}\n            helpText=\"Use '|' as a toolbar divider. There are 4 toolbar groups: 'formatgroup', 'assetgroup', 'insertgroup' and 'extragroup'.\"\n            onChange={this.onInputChange}\n            textLinkProps={{\n              icon: \"ExternalLink\",\n              text: \"Toolbar buttons\",\n              onClick: () =>\n                window.open(\n                  \"https://www.tiny.cloud/docs/advanced/available-toolbar-buttons/\"\n                ),\n            }}\n          />\n\n          {this.state.parameters.plugins.includes(\"quickbars\") ? (\n            <TextField\n              name=\"quickbarsSelectionToolbar\"\n              id=\"quickbarsSelectionToolbar\"\n              labelText=\"Quickbars Selection Toolbar\"\n              value={this.state.parameters.quickbarsSelectionToolbar}\n              onChange={this.onInputChange}\n              textLinkProps={{\n                icon: \"ExternalLink\",\n                text: \"Quickbars documentation\",\n                onClick: () =>\n                  window.open(\"https://www.tiny.cloud/docs/plugins/quickbars/\"),\n              }}\n            />\n          ) : null}\n\n          <TextField\n            name=\"formatgroup\"\n            id=\"formatgroup\"\n            labelText=\"Toolbar Format Group\"\n            helpText=\"Referenced using key 'formatgroup' in the toolbar field\"\n            value={this.state.parameters.formatgroup}\n            onChange={this.onInputChange}\n          />\n\n          <TextField\n            name=\"assetgroup\"\n            id=\"assetgroup\"\n            labelText=\"Toolbar Asset Group\"\n            helpText=\"Handles Contentful assets using `existingasset` for inserting an existing Asset or `newasset` for creating a new Asset. Referenced using key 'assetgroup' in the toolbar field.\"\n            value={this.state.parameters.assetgroup}\n            onChange={this.onInputChange}\n          />\n\n          <TextField\n            name=\"insertgroup\"\n            id=\"insertgroup\"\n            labelText=\"Toolbar Insert Group\"\n            helpText=\"Referenced using key 'insertgroup' in the toolbar field\"\n            value={this.state.parameters.insertgroup}\n            onChange={this.onInputChange}\n          />\n\n          <TextField\n            name=\"extragroup\"\n            id=\"extragroup\"\n            labelText=\"Toolbar Extra Group\"\n            helpText=\"Referenced using key 'extragroup' in the toolbar field\"\n            value={this.state.parameters.extragroup}\n            onChange={this.onInputChange}\n          />\n\n          <Switch\n            id=\"menubar\"\n            isChecked={this.state.parameters.menubar}\n            labelText=\"Show the menubar\"\n            onToggle={(isChecked) => this.onSwitchChange(\"menubar\", isChecked)}\n          />\n\n          <TextField\n            name=\"resizing\"\n            id=\"resizing\"\n            labelText=\"Resizing behaviour for Contentful media assets\"\n            helpText=\"Set an optional resizing behaviour to all images inserted from Contentful\"\n            value={this.state.parameters.resizing}\n            onChange={this.onInputChange}\n            textLinkProps={{\n              icon: \"ExternalLink\",\n              text: \"Contentful images api resizing documentation\",\n              onClick: () =>\n                window.open(\n                  \"https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&-cropping\"\n                ),\n            }}\n          />\n\n          <TextField\n            name=\"customContentStyle\"\n            id=\"customContentStyle\"\n            textarea\n            labelText=\"Custom Content Styling\"\n            helpText=\"Override default editor styles.\"\n            value={this.state.parameters.customContentStyle}\n            onChange={this.onInputChange}\n            textInputProps={{ rows: 10 }}\n            textLinkProps={{\n              icon: \"ExternalLink\",\n              text: \"TinyMCE content_style documentation\",\n              onClick: () =>\n                window.open(\n                  \"https://www.tiny.cloud/docs/configure/content-appearance/#exampleapplyingonecssstyleusingcontent_style\"\n                ),\n            }}\n          />\n\n          <Switch\n            id=\"customcolors\"\n            isChecked={this.state.parameters.customcolors}\n            labelText=\"Show Custom Colors Palette Picker\"\n            onToggle={(isChecked) =>\n              this.onSwitchChange(\"customcolors\", isChecked)\n            }\n          />\n\n          <Switch\n            id=\"custompalette\"\n            isChecked={this.state.parameters.custompalette}\n            labelText=\"Customize default TinyMCE color palette\"\n            onToggle={(isChecked) =>\n              this.onSwitchChange(\"custompalette\", isChecked)\n            }\n          />\n\n          {this.state.parameters.custompalette ? (\n            <>\n              <FormLabel htmlFor=\"colormap\">Default color palette</FormLabel>\n              <Table className=\"colormap\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Color Value</TableCell>\n                    <TableCell>Color Label</TableCell>\n                    <TableCell style={{ minWidth: \"200px\" }}></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.parameters.colormap.map((color, idx) => {\n                    if (idx % 2 !== 0) {\n                      return null;\n                    }\n                    return (\n                      <TableRow key={`color-${idx}`}>\n                        <TableCell\n                          style={{\n                            backgroundColor: this.state.parameters.colormap[\n                              idx\n                            ],\n                          }}\n                        >\n                          <TextField\n                            name={`color-${idx}`}\n                            id={`color-${idx}`}\n                            value={this.state.parameters.colormap[idx]}\n                            onChange={(e) => this.onColorChange(e, idx)}\n                            labelText=\"\"\n                          />\n                        </TableCell>\n                        <TableCell\n                          style={{\n                            backgroundColor: this.state.parameters.colormap[\n                              idx\n                            ],\n                          }}\n                        >\n                          <TextField\n                            name={`color-label-${idx}`}\n                            id={`color-label-${idx}`}\n                            value={this.state.parameters.colormap[idx + 1]}\n                            onChange={(e) =>\n                              this.onColorLabelChange(e, idx + 1)\n                            }\n                            labelText=\"\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          {!this.validateHexColor(\n                            this.state.parameters.colormap[idx]\n                          ) ? (\n                            <ValidationMessage>\n                              Invalid Hex Color value\n                            </ValidationMessage>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n              <HelpText>\n                Only used if keywords <em>forecolor</em> or <em>backcolor</em>{\" \"}\n                are defined in the toolbar).\n              </HelpText>\n            </>\n          ) : null}\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React from \"react\";\nimport { FieldExtensionSDK } from \"contentful-ui-extensions-sdk\";\nimport { Editor } from \"@tinymce/tinymce-react\";\n\nimport { AppInstallationParameters } from \"./ConfigDefaults\";\nimport { Spinner } from \"@contentful/forma-36-react-components\";\n\ninterface FieldProps {\n  sdk: FieldExtensionSDK;\n}\n\ninterface ImageProps {\n  id: string;\n  url: string;\n  width: string;\n  height: string;\n  title?: string;\n}\n\ninterface LinkProps {\n  id: string;\n  url: string;\n  title: string;\n}\n\nconst Field = (props: FieldProps) => {\n  const sdk = props.sdk;\n  const { apiKey } = sdk.parameters.installation as AppInstallationParameters;\n\n  const [init, setInit] = React.useState(null as any);\n  const [value, setValue] = React.useState(sdk.field.getValue());\n\n  let debounceInterval: any = false;\n\n  const onExternalChange = (externalValue: string) => {\n    setValue(externalValue);\n  };\n\n  React.useEffect(() => {\n    sdk.window.startAutoResizer();\n  }, [sdk.window]);\n\n  React.useEffect(() => {\n    // Handler for external field value changes (e.g. when multiple authors are working on the same entry).\n    return sdk.field.onValueChanged(onExternalChange);\n  });\n\n  React.useEffect(() => {\n    const {\n      formatgroup,\n      insertgroup,\n      assetgroup,\n      extragroup,\n      plugins,\n      menubar,\n      toolbar,\n      customcolors,\n      custompalette,\n      colormap,\n      quickbarsSelectionToolbar,\n      resizing,\n      customContentStyle,\n    } = sdk.parameters.installation as AppInstallationParameters;\n\n    const renderImage = ({ id, url, width, height, title = \"\" }: ImageProps) =>\n      `<img\n        src=\"${url}?${resizing}\"\n        width=\"${width}\"\n        height=\"${height}\"\n        alt=\"${title}\"\n        data-contentful-id=\"${id}\"\n        data-original-width=\"${width}\"\n        data-original-height=\"${height}\"\n      />`;\n\n    const renderLink = ({ id, url, title }: LinkProps) =>\n      `<a href=\"${url}\" data-contentful-id=\"${id}\">${title}</a>`;\n\n    const renderContent = (data: any) => {\n      const { assetType, id, title, url, width, height } = data;\n\n      return assetType === \"image\"\n        ? renderImage({ id, url, width, height, title })\n        : renderLink({ id, url, title });\n    };\n\n    const setupEditor = (editor: any) => {\n      editor.ui.registry.addButton(\"existingasset\", {\n        text: \"Link existing\",\n        icon: \"edit-image\",\n        tooltip: \"Insert existing Contentful Media Asset\",\n        onAction: async () => {\n          await handleSelectAsset().then((data) => {\n            if (data) {\n              editor.insertContent(renderContent(data));\n            }\n          });\n        },\n      });\n\n      editor.ui.registry.addButton(\"newasset\", {\n        text: \"Add new and link\",\n        icon: \"image\",\n        tooltip: \"Create and Insert Contentful Media Asset\",\n        onAction: async () => {\n          await handleCreateAsset().then((data) => {\n            if (data) {\n              editor.insertContent(renderContent(data));\n            }\n          });\n        },\n      });\n\n      editor.ui.registry.addButton(\"editasset\", {\n        text: \"Edit media asset\",\n        icon: \"image\",\n        tooltip: \"Edit Contentful Media Asset\",\n        onAction: async () => {\n          const node = editor.selection.getNode();\n          const parts = node\n            .getAttribute(\"src\")\n            .replace(/(http:|https:)?\\/\\/.*\\.ctfassets\\.net\\//, \"\")\n            .replace(`${sdk.ids.space}/`, \"\")\n            .split(\"/\");\n\n          await handleEditAsset(parts[0]).then((data) => {\n            if (data) {\n              editor.insertContent(renderContent(data));\n            }\n          });\n        },\n      });\n\n      editor.ui.registry.addContextToolbar(\"editasset\", {\n        predicate: (node: any) => {\n          return (\n            node.nodeName.toLowerCase() === \"img\" &&\n            node.getAttribute(\"src\").includes(`ctfassets.net/${sdk.ids.space}/`)\n          );\n        },\n        items: \"editasset\",\n        position: \"node\",\n        scope: \"node\",\n      });\n    };\n\n    const getAssetData = (asset: any | null) => {\n      if (asset?.fields?.file && asset?.fields?.file[sdk.field.locale]) {\n        const assetType = /^image\\/(.*)$/.test(\n          asset.fields.file[sdk.field.locale].contentType\n        )\n          ? \"image\"\n          : \"file\";\n\n        const data: any = {\n          assetType,\n          id: asset.sys.id,\n          url: asset.fields.file[sdk.field.locale].url,\n          title: asset.fields.title[sdk.field.locale],\n        };\n\n        if (assetType === \"image\") {\n          data.width = asset.fields.file[sdk.field.locale].details.image.width;\n          data.height =\n            asset.fields.file[sdk.field.locale].details.image.height;\n        }\n\n        return data;\n      }\n    };\n\n    const handleSelectAsset = async () =>\n      sdk.dialogs.selectSingleAsset().then((asset: any) => getAssetData(asset));\n\n    const handleCreateAsset = async () =>\n      sdk.navigator\n        .openNewAsset({ slideIn: { waitForClose: true } })\n        .then(({ entity }: any) => getAssetData(entity));\n\n    const handleEditAsset = async (id: string) =>\n      await sdk.navigator\n        .openAsset(id, { slideIn: { waitForClose: true } })\n        .then(({ entity }: any) => getAssetData(entity));\n\n    const defaults: any = {\n      height: 500,\n      menubar,\n      plugins,\n      toolbar,\n      image_caption: true,\n      custom_colors: customcolors,\n      toolbar_groups: {},\n      quickbars_selection_toolbar: quickbarsSelectionToolbar,\n      quickbars_insert_toolbar: false,\n      content_style: customContentStyle,\n      setup: (editor: any) => setupEditor(editor),\n    };\n\n    if (custompalette) {\n      defaults.color_map = colormap;\n    }\n\n    if (formatgroup) {\n      defaults.toolbar_groups.formatgroup = {\n        icon: \"format\",\n        tooltip: \"Formatting\",\n        items: formatgroup,\n      };\n    }\n\n    if (assetgroup) {\n      defaults.toolbar_groups.assetgroup = {\n        icon: \"gallery\",\n        tooltip: \"Contentful Assets\",\n        items: assetgroup,\n      };\n    }\n\n    if (insertgroup) {\n      defaults.toolbar_groups.insertgroup = {\n        icon: \"plus\",\n        tooltip: \"Insert\",\n        items: insertgroup,\n      };\n    }\n\n    if (extragroup) {\n      defaults.toolbar_groups.extragroup = {\n        icon: \"more-drawer\",\n        tooltip: \"More\",\n        items: extragroup,\n      };\n    }\n\n    setInit(defaults);\n  }, [sdk]);\n\n  const handleEditorChange = (newValue: string) => {\n    if (debounceInterval) {\n      clearInterval(debounceInterval);\n    }\n\n    debounceInterval = setTimeout(() => {\n      sdk.field.setValue(newValue);\n    }, 500);\n  };\n\n  return init ? (\n    <Editor\n      value={value}\n      apiKey={apiKey}\n      init={init}\n      onEditorChange={handleEditorChange}\n    />\n  ) : (\n    <div>\n      Loading editor <Spinner />\n    </div>\n  );\n};\n\nexport default Field;\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport {\n  AppExtensionSDK,\n  FieldExtensionSDK,\n  BaseExtensionSDK,\n  init,\n  locations,\n} from \"contentful-ui-extensions-sdk\";\nimport \"@contentful/forma-36-react-components/dist/styles.css\";\nimport \"@contentful/forma-36-fcss/dist/styles.css\";\nimport \"./index.css\";\n\nimport Config from \"./components/ConfigScreen\";\nimport Field from \"./components/Field\";\n\ninit((sdk: BaseExtensionSDK) => {\n  const root = document.getElementById(\"root\");\n\n  const ComponentLocationSettings = [\n    {\n      location: locations.LOCATION_APP_CONFIG,\n      component: <Config sdk={(sdk as unknown) as AppExtensionSDK} />,\n    },\n    {\n      location: locations.LOCATION_ENTRY_FIELD,\n      component: <Field sdk={(sdk as unknown) as FieldExtensionSDK} />,\n    },\n  ];\n\n  ComponentLocationSettings.forEach((componentLocationSetting) => {\n    if (sdk.location.is(componentLocationSetting.location)) {\n      render(componentLocationSetting.component, root);\n    }\n  });\n});\n"],"sourceRoot":""}